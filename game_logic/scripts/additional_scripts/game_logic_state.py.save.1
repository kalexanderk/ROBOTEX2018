#! /usr/bin/env python
# -*- coding: utf-8 -*-

import rospy
from time import time,sleep
from geometry_msgs.msg import Point
from std_msgs.msg import String
from std_msgs.msg import Int16

class GameLogicState():

    def __init__(self):
        #отримуємо повідомлення про обробку зображення
        self.image_processing = rospy.Subscriber("image_processing/objects", String, self.new_object_callback_ball)
        #надсилаємо запити на запуск моторів та thrower'а
        self.robot_movement_pub = rospy.Publisher('robot_movement', Point, queue_size=10)
        self.thrower_pub = rospy.Publisher("thrower", Int16, queue_size=10)

        self.ball_x = None
        self.ball_y = None
        self.basket_x = None
        self.basket_y = None

        self.basket_x = 640
        self.basket_y = 640

        self.state = 1
        #state 0 - wait for XBEE command
        #state 1 - look for the ball and center
        #state 2 - approch the ball
        #state 3 - center for the basket
        #state 4 - charge the ball towards the basket

    def new_object_callback_ball(self, message):
        position = message.data.split("\n")[0]
        if position != "None":
            self.ball_x = float(position.split(";")[0])
            self.ball_y = float(position.split(";")[1])

    def new_object_callback_basket(self, message):
        position = message.data.split("\n")[1]
        if position != "None":
            self.basket_x = float(position.split(";")[0])
            self.basket_y = float(position.split(";")[1])


    def move_backward(self):
        self.robot_movement_pub.publish(Point(40, -90, 0))

    def move_forward(self):
        self.robot_movement_pub.publish(Point(20, 90, 0))

    def move_forward2(self):
        self.robot_movement_pub.publish(Point(25, 90, 0))

    def rotating(self):
        self.robot_movement_pub.publish(Point(0, 0, 40))

    def stop(self):
        self.robot_movement_pub.publish(Point(0, 0, 0))

    def rounding(self):
        self.robot_movement_pub.publish(Point(10, 0, 20))

    def thrower(self, speed):
        self.thrower_pub.publish(Int16(speed))


if __name__ == "__main__":
    rospy.init_node('game_logic_node', anonymous=True)
    rate = rospy.Rate(60)

    game_logic = GameLogicState()

    while not rospy.is_shutdown():
    
        if game_logic.state == 1:
            game_logic.rotating()
            if game_logic.ball_x < 690 and game_logic.ball_x 590:
                game_logic.state = 2
        elif game_logic.state == 2:
            game_logic.move_forward2()
            if game_logic.ball_y > 660:
                game_logic.state = 3
        elif game_logic.state == 3:
            print("I kant see da basket")

        rate.sleep()

